// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace dqm_installer_flt {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by SJisIOApi.
const flutter::StandardMessageCodec& SJisIOApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `SJisIOApi` to handle messages through the `binary_messenger`.
void SJisIOApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  SJisIOApi* api) {
  SJisIOApi::SetUp(binary_messenger, api, "");
}

void SJisIOApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  SJisIOApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.dqm_installer_flt.SJisIOApi.readFileWithSJis" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_path_arg = args.at(0);
          if (encodable_path_arg.IsNull()) {
            reply(WrapError("path_arg unexpectedly null."));
            return;
          }
          const auto& path_arg = std::get<std::string>(encodable_path_arg);
          ErrorOr<std::string> output = api->ReadFileWithSJis(path_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.dqm_installer_flt.SJisIOApi.writeFileWithSJis" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_path_arg = args.at(0);
          if (encodable_path_arg.IsNull()) {
            reply(WrapError("path_arg unexpectedly null."));
            return;
          }
          const auto& path_arg = std::get<std::string>(encodable_path_arg);
          const auto& encodable_data_arg = args.at(1);
          if (encodable_data_arg.IsNull()) {
            reply(WrapError("data_arg unexpectedly null."));
            return;
          }
          const auto& data_arg = std::get<std::string>(encodable_data_arg);
          std::optional<FlutterError> output = api->WriteFileWithSJis(path_arg, data_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue SJisIOApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue SJisIOApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace dqm_installer_flt
